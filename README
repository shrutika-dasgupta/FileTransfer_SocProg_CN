## README DOCUMENTATION ##

--> Total files: 7
	1)	Sender.java
	2)	Receiver.java
	3)	README_DOC
	4)	newudpl
	5)	file.txt (Sample file)
	6)	1mb.txt (Sample file)
	7) 	Makefile

--> Sequence of steps in which the program must be run:
	-1) Run the Proxy
	-2) Run the Sender
	-3) Run the Reciver 

A)COMMAND LINE SYNTAX:


	## SENDER ## : java Sender <FILE-NAME TO SEND> <REMOTE IP ADDRESS> <REMOTE PORT NUMBER> <ACK PORT NUMBER> <WINDOW SIZE> <LOGFILE>
	
	Attribute values :
	<FILE-NAME TO SEND> : Name of the file to be sent validated on the command line for characters "a-z A-Z . _ 0-9 -"
	<REMOTE IP ADDRESS>	: IP address of the remote host validated for the form a.b.c.d or 'localhost' on the command prompt
	<REMOTE PORT NUMBER>: Remote port number to which the packets are sent--> in our case to the Proxy port
	<ACK PORT NUMBER>	: Listening port where the Acknowledgement packet via the TCP connectopn between the sender and the receiver is received.
	<WINDOW SIZE>		: Window size for sending the packet --> This program kept equal to 1.
	<LOGFILE>			: Name of the logfile where in the log entries are to be printed.
						-->	For the sender side log file the name of the log file stored as 
							'<Name_of_logfile>_s' ---> to handle the problem that can occur when te sender and reciever have same log filenames.
						--> When entered 'stdout' user --> logfile named 'stdout_s' created and the log entries are printed on the command prompt.
	## RECEIVER ## :java Receiver <FILE-NAME TO BE RECEIVED> <LISTENING PORT> <REMOTE-IP> <REMOTE-PORT> <LOG-FILE>
	<FILE-NAME TO SEND> : Name of copy of the file sent validated on the command line for characters "a-z A-Z . _ 0-9 -"
	<LISTENING PORT>	: The port at which the packet is received.
	<REMOTE IP ADDRESS>	: IP address of the remote host validated for the form a.b.c.d or 'localhost' on the command prompt
	<REMOTE PORT NUMBER>: Remote port number to which the Acknowledgements are sent--> in our case to the sender port
	<LOGFILE>			: Name of the logfile where in the log entries are to be printed.
						-->	For the sender side log file the name of the log file stored as 
							'<Name_of_logfile>_s' ---> to handle the problem that can occur when te sender and reciever have same log filenames.
						--> When entered 'stdout' user --> logfile named 'stdout_r' created and the log entries are printed on the command prompt.


B) IMPLEMENTATION OF THE PROGRAM:

	(a) TCP Segment Structure : 
		# SeqNo 		--> Unique for each Packet, sequenced in accordance to how packet is sent.
		# AckNo 		--> Set when the acknowledgement is received, its like the sequence number for the acknowledgement.
		# checksum		--> Calculated using .hashCode function for the entire packet along with the payload.
		# window_size	--> Set to 1
		# ACK-flag		--> Set when the acknowledgement packet is received.
		# FIN-flag		--> Set when the last packet is sent.
		# payload 		--> Contains the data into which the file is divided into. Payload is formed by converting the contents of the
							file into a single substring and then sub-dividing it into substrings of fixed size.

	Note:	The segment size can be varied and set using the 'max_segment_length' field which is made final.
			The size of the header field comes to upto 15 bytes.
			The size of each segement( Header + Payload ) is calculated to be equal to 
				576 bytes i.e. 15 bytes of Header + 128 bytes of additional values added when convert into objects + 433 bytes of payload.
			The file is subdivided into a segments of fixed size 576 bytes.

	(b) Sender and Receiver states that are visited:
		1) The Proxy is run with the values for the the 	--> Packet loss percentage set by : -L
															--> Bit error value 			  : -B
															--> Delay						  : -d
		2) Next the sender is run in either of the two ways having the log file entry as:-
			i) log_file_name
			ii) stdout
		  Next the reciever is run with the same either of the two ways as the sender.

			- Initially the sender attributes and reciever attributes for command line arguments are checked for valid arguements. Then the UDP DatagramSocket is created for sending the packets to the recievers end.
			- the packets are segmented into fixed size packets on the senders side. The header is attached to the payload and the final packet segments is created of size= max_segment_size value.
			-the total number of packets that are created is sent over to the recivers end via the TCP connection that is created between the sender and the receiver keeping the proxy out of the connection.
			- the header includes the checksum value of all the fields which is calculated via hashCode() and also included inside the header.
			- the packet is sent over the TCP connection.
			- when the packet is sent an entry of the packet sent is made inside to logfile (either with 'filename' or 'stdout')
			- these packets are sent to the proxy where the either of the following happens:
				i) the packets are dropped
				ii) the packet transimission is delayed which causes the sender to re-transmit the packet again.
				iii) Bit error is introduced inside the packet
			- all the above  3 isues are handled on the receiver side and only then the acknowledgement packet is sent.
			- when the ack is recived from the receiver via the TCP socket connectionthe entry of the ack packet recieved is made in the log file.
			- thus the log file on the senders end has entries for the re-transmitted packets, acknowledged packet and the received acknowledgement packet. 
			- If the user has given the log file name as 'stdout' then the log file entries are printed on the command prompt.
			- The entry in the log file is made in the format
				sent packets:"Source:(port/IP-Adress) Dest:(port/IP-Address) SeqNo:(#) AckNo:(#) FFACK:(ack-flag bit) FFIN:(flag-FIN-bit) TimeStamp"
				ack received:"Source:(port/IP-Adress) Dest:(port/IP-Address) SeqNo:(#) AckNo:(#) FFACK:(ack-flag bit) FFIN:(flag-FIN-bit) TimeStamp RTT"
			- the RTT value is calculated via the given formula:
				newRTT = (alpha)oldRTT + (1-alpha)(sampleRTT);
			-This is RTT value is taken as the Timeout for the the duration of re-transmission of the packets until the acknowledgement is not received.
			-Later the final output is printed after successful delivery, that includes the number of bytes transfered, the number of segments in total transfered and the number of segments retransmitted.
			- Abrupt termination of the console is also handled (Cntrl+C)
			- I/O error is also handled
			- "File not found" eror is also handled.
		
		3) For the receivers side, the packets are received and checked for
			i) Error bit --> handled by checking the checksum value and putting entry into the log file for "CORRUPTED PACKETS".
			ii) Duplicate packets --> The log entry checks for whether the packet that is received has its entry inside the log file already present or not--> if yes then these packets are discarded
			
		- everytime a packet is received whether duplicate or errored or correct packet and entry of it is made into the log file.
		- the Acknowlegment of the packet that is sent is also recorded in the logfile along with its timestamp value.

	(c) Loss Recovery Mechanism:
		The program offers the mechanism to recover from all the 5 network issues:
		1) Corrupt packet--> by checking the checksum value of the packet with the one that is sent with the packet and retransmit the packet if not matched.
		2) Duplicate packets --> The duplicate packets are discarded by checking the entry of the packet in the logfile.
		3) Delay introduced --> Delay is handled by re-transmitting the packet as its already being re-transmitted and the packets are dropped.
		4) Out of Order delivery --> not included as the window size is only 1.
		5) Packet loss --> When the packet is lost and and the acknowledgement is not received within the given timeout interval then the packet is retransmitted.




